#!/bin/bash
#
# LimaconLinux bootstrap software
#

set -e

# Usage
usage() {
	cat <<EOF
lunch - small and simple Limacon build system

Usage:	BARCH=[supported architecture] ./lunch [option]

	toolchain		Build Limacon toolchain
	system			Build Limacon system repository
	image			Build Limacon image file
	tarball			Build Limacon tarball
	usage			Show this information
	version			Show version information

EOF
	exit 0
}

# Message commands
printmsg() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[32m==>\e[0m $msg\n"
}

printmsgerror() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[31m==!\e[0m $msg\n"
	exit 1
}

# Install package in filesystem root
pkginstall() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing package: '"$package"'"
		cd $REPO/$package
		makepkg --config $BUILD/target-makepkg.conf -dd -c -C
		pacman -U $PACKAGES/$package-*.pkg.tar.xz --arch $BARCH --root $ROOTFS --noconfirm
	done
}

pkginstalltwo() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing package: '"$package"'"
		cd $REPO/$package
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C
		pacman -U $PACKAGES/$package-*.pkg.tar.xz --arch $BARCH --root $ROOTFS --noconfirm
	done
}

pkginstallforce() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing package: '"$package"'"
		cd $REPO/$package
		makepkg --config $BUILD/target-makepkg.conf -dd -c -C -f
		pacman -U $PACKAGES/$package-*.pkg.tar.xz --arch $BARCH --root $ROOTFS --force --noconfirm
	done
}

pkginstallnodeps() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing package: '"$package"'"
		cd $REPO/$package
		makepkg --config $BUILD/target-makepkg.conf -dd -c -C
		pacman -U $PACKAGES/$package-*.pkg.tar.xz --arch $BARCH --root $ROOTFS --noconfirm -dd
	done
}

# Install toolchain package in toolchain root
pkgtcinstall() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing toolchain package: '"$package"'"
		cd $TCREPO/$package
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C -f --skipinteg -f
		pacman -U $PACKAGES/host-$package-*.pkg.tar.xz --root $TOOLS --force --noconfirm
		rm -rf $PACKAGES/host-$package-*.pkg.tar.xz
	done
}

# Used to initialize pacman database
initdb() {
	local dir="$@"
	for dbindir in $dir; do
		printmsg "Database initialization in '"$dbindir"'"
		mkdir -p $dbindir/var/lib/pacman
	done
}

# Check for root
check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		printmsgerror "This script must be run as root" 
	fi
}

# Architrecture selection
setup_architecture() {
	case $BARCH in
		riscv32)
			printmsg "Using configuration for riscv32"
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv32-linux-musl"
			export XKARCH="riscv"
			export GCCOPTS="--with-arch=rv32imafdc"
			;;
		riscv64)
			printmsg "Using configuration for riscv64"
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv64-linux-musl"
			export XKARCH="riscv"
			export GCCOPTS="--with-arch=rv64imafdc"
			;;
		*)
			printmsgerror "BARCH variable is not set or supported"
	esac
}

# Append directory paths, *FLAGS and host tools
setup_environment() {
	printmsg "Setting up envirinment"

	# Common paths
	export CWD="$(pwd)"
	export REPO="$CWD/packages"
	export TCREPO="$CWD/toolchain"

	# Build paths
	export BUILD="$CWD/build-$BARCH"
	export SOURCES="$BUILD/sources"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/toolchain"
	export PACKAGES="$BUILD/packages"
	export TARBUILD="$BUILD/tarbuild"
	export IMGBUILD="$BUILD/imgbuild"

	# Host setup
	export PATH="$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"

	if [ -z $MKJOBS ]; then
		export MKJOBS="$(expr $(nproc) + 1)"
	fi
	export MKOPTS="-j$MKJOBS"

	export CFLAGS="-Os -g0 -s -pipe"
	export CXXFLAGS="$CFLAGS"
}

build_environment() {
	printmsg "Building envirinment"

	rm -rf $BUILD
	mkdir -p $BUILD $SOURCES $ROOTFS $TOOLS $PACKAGES $TARBUILD $IMGBUILD

	initdb $TOOLS $ROOTFS $TARBUILD $IMGBUILD

	cp -a $TCREPO/makepkg.conf $BUILD/host-makepkg.conf
	cp -a $REPO/makepkg.conf $BUILD/target-makepkg.conf

	for files in $BUILD/host-makepkg.conf $BUILD/target-makepkg.conf; do
		sed -i $files \
			-e "s|@CARCH[@]|$BARCH|g" \
			-e "s|@CHOST[@]|$XTARGET|g" \
			-e "s|@CFLAGS[@]|$CFLAGS|g" \
			-e "s|@CXXFLAGS[@]|$CXXFLAGS|g" \
			-e "s|@MKOPTS[@]|$MKOPTS|g" \
			-e "s|@PKGS[@]|$PACKAGES|g" \
			-e "s|@SOURCES[@]|$SOURCES|g" \
			-e "s|@ROOTFS[@]|$ROOTFS|g" \
			-e "s|@TOOLS[@]|$TOOLS|g" \
			-e "s|@XHOST[@]|$XHOST|g" \
			-e "s|@XTARGET[@]|$XTARGET|g" \
			-e "s|@XKARCH[@]|$XKARCH|g" \
			-e "s|@GCCOPTS[@]|$GCCOPTS|g" \
			-e "s|@HOSTCC[@]|$HOSTCC|g" \
			-e "s|@HOSTCXX[@]|$HOSTCXX|g" \
			-e "s|@PATH[@]|$PATH|g"
	done
}

build_toolchain() {
	pkginstall filesystem
	pkgtcinstall file
	pkgtcinstall pkgconf
	pkginstalltwo linux-headers
	pkgtcinstall binutils
	pkgtcinstall gcc-static
	pkginstalltwo musl
	pkgtcinstall gcc
}

build_system() {
	pkginstall libz
}

CMD="${1}"
PKG="${*:2}"

case $CMD in
	toolchain)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_toolchain
		;;
	system)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_toolchain
		build_system
#		build_repository
#		build_image
		;;
	package)
		for pkg in $PKG; do
			pkginstall $pkg
		done
		;;
	packagef)
		for pkg in $PKG; do
			pkginstallforce $pkg
		done
		;;
	packagend)
		for pkg in $PKG; do
			pkginstallnodeps $pkg
		done
		;;
	image)
		;;
	tarball)
		;;
	version)
		;;
	usage|*)
		usage
esac

exit 0

