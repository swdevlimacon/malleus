#!/bin/bash
#
# LimaconLinux bootstrap software
#

set -e

# Usage
usage() {
	cat <<EOF
lunch - small and simple Limacon build system
Host:
Usage:	BARCH=[supported architecture] ./lunch [option]
	stage1			Build Limacon toolchain
	stage2			Build Limacon chroot system
	enter-chroot		Enter to the chroot system
	tarball			Make tarball archive with filesystem
	usage			Show this information
	version			Show version information
Target:
Usage:	lunch [option] [package1, package2]
	stage3			Rebuild chroot system for native system
	stage4			Build native system
	package			Build specific package
	upackage		Update specific package
	viewsums		View md5sums for specific package
	order			Build specific group of packages
	usage			Show this information
	version			Show version information
EOF
	exit 0
}

# Message commands
printmsg() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[32m==>\e[0m $msg\n"
}

printmsgerror() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[31m==!\e[0m $msg\n"
	exit 1
}

# Install package in filesystem root
pkginstall() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing package: '"$package"'"
		cd $REPO/$package
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C -f --skipinteg -f
		pacman -U $PACKAGES/$package-*.pkg.tar.xz --root $ROOTFS --noconfirm
	done
}

# Install chroot package in filesystem root
pkgchinstall() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing chroot package: '"$package"'"
		cd $STAGE2/$package
		makepkg --config $BUILD/target-makepkg.conf -dd -c -C -f --skipinteg -f
		pacman -U $PACKAGES/chroot-$package-*.pkg.tar.xz --arch $BARCH --root $ROOTFS --noconfirm
		rm -rf $PACKAGES/chroot-$package-*.pkg.tar.xz
	done
}

pkgchinstalltwo() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing chroot package: '"$package"'"
		cd $STAGE2/$package
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C -f --skipinteg -f
		pacman -U $PACKAGES/chroot-$package-*.pkg.tar.xz --arch $BARCH --root $ROOTFS --noconfirm
		rm -rf $PACKAGES/chroot-$package-*.pkg.tar.xz
	done
}

# Install toolchain package in toolchain root
pkgtcinstall() {
	local pkg="$@"
	for package in $pkg; do
		printmsg "Building and installing toolchain package: '"$package"'"
		cd $STAGE1/$package
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C -f --skipinteg -f
		pacman -U $PACKAGES/host-$package-*.pkg.tar.xz --root $TOOLS --noconfirm
		rm -rf $PACKAGES/host-$package-*.pkg.tar.xz
	done
}

# Install native package in filesystem root
pkgnativeinstall() {
	local pkg="$@"

	if [ "$NODEPS" = "true" ]; then
		local depopt='-dd'
	fi

	if [ "$FOCRCE" = "true" ]; then
		local forceopt='--force'
	fi

	for package in $pkg; do
		printmsg "Building and installing package: '"$package"'"
		cd /var/repo/$package
		makepkg -c -C $depopt
		rm -rf $PACKAGES/*debug*.pkg.tar.xz
		pacman -U /output/$package-*.pkg.tar.xz --arch $BARCH --needed $depopt $forceopt --noconfirm
	done
}

# Reinstall native package in filesystem root
pkgnativereinstall() {
	local pkg="$@"

	if [ "$NODEPS" = "true" ]; then
		local depopt='-dd'
	fi

	if [ "$FOCRCE" = "true" ]; then
		local forceopt='--force'
	fi

	for package in $pkg; do
		printmsg "Rebuilding and reinstalling package: '"$package"'"
		rm -rf /output/$package-*.pkg.tar.xz
		cd /var/repo/$package
		makepkg -c -C --force $depopt
		rm -rf $PACKAGES/*debug*.pkg.tar.xz
		pacman -U /output/$package-*.pkg.tar.xz --arch $BARCH $depopt $forceopt --noconfirm
	done
}

# Install native package in filesystem root (stage 3)
pkgnativeinstallstage3() {
	local pkg="$@"

	for package in $pkg; do
		printmsg "Building and installing package: '"$package"'"
		cd /var/stage3/$package
		makepkg -c -C -dd --skipinteg -f
		pacman -U /output/$package-*.pkg.tar.xz --arch $BARCH --needed -dd --force --noconfirm
		rm -rf /output/$package-*.pkg.tar.xz
	done
}

# Used to initialize pacman database
initdb() {
	local dir="$@"
	for dbindir in $dir; do
		printmsg "Database initialization in '"$dbindir"'"
		mkdir -p $dbindir/var/lib/pacman
	done
}

# Check for root
check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		printmsgerror "This script must be run as root" 
	fi
}

# Architrecture selection
setup_architecture() {
	case $BARCH in
		riscv32)
			printmsg "Using configuration for riscv32"
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv32-linux-musl"
			export XKARCH="riscv"
			export GCCOPTS="--with-arch=rv32imafdc"
			;;
		riscv64)
			printmsg "Using configuration for riscv64"
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv64-linux-musl"
			export XKARCH="riscv"
			export GCCOPTS="--with-arch=rv64imafdc"
			;;
		*)
			printmsgerror "BARCH variable is not set or supported"
	esac
}

# Append directory paths, *FLAGS and host tools
setup_environment() {
	printmsg "Setting up envirinment"

	# Common paths
	export CWD="$(pwd)"
	export REPO="$CWD/packages"
	export STAGE1="$CWD/stage1"
	export STAGE2="$CWD/stage2"
	export STAGE3="$CWD/stage3"
	export ORDERS="$CWD/orders"

	# Build paths
	export BUILD="$CWD/build-$BARCH"
	export SOURCES="$BUILD/sources"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/toolchain"
	export PACKAGES="$BUILD/packages"
	export TARBUILD="$BUILD/tarbuild"
	export IMGBUILD="$BUILD/imgbuild"

	# Host setup
	export PATH="$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"

	if [ -z $MKJOBS ]; then
		export MKJOBS="$(expr $(nproc) + 1)"
	fi
	export MKOPTS="-j$MKJOBS"

	export CFLAGS="-Os -g0 -s -pipe"
	export CXXFLAGS="$CFLAGS"
}

build_environment() {
	printmsg "Building envirinment"

	rm -rf $BUILD
	mkdir -p $BUILD $SOURCES $ROOTFS $TOOLS $PACKAGES $TARBUILD $IMGBUILD

	initdb $TOOLS $ROOTFS $TARBUILD $IMGBUILD

	cp -a $STAGE1/makepkg.conf $BUILD/host-makepkg.conf
	cp -a $STAGE2/makepkg.conf $BUILD/target-makepkg.conf

	for files in $BUILD/host-makepkg.conf $BUILD/target-makepkg.conf; do
		sed -i $files \
			-e "s|@CARCH[@]|$BARCH|g" \
			-e "s|@CHOST[@]|$XTARGET|g" \
			-e "s|@CFLAGS[@]|$CFLAGS|g" \
			-e "s|@CXXFLAGS[@]|$CXXFLAGS|g" \
			-e "s|@MKOPTS[@]|$MKOPTS|g" \
			-e "s|@PKGS[@]|$PACKAGES|g" \
			-e "s|@SOURCES[@]|$SOURCES|g" \
			-e "s|@ROOTFS[@]|$ROOTFS|g" \
			-e "s|@TOOLS[@]|$TOOLS|g" \
			-e "s|@XHOST[@]|$XHOST|g" \
			-e "s|@XTARGET[@]|$XTARGET|g" \
			-e "s|@XKARCH[@]|$XKARCH|g" \
			-e "s|@GCCOPTS[@]|$GCCOPTS|g" \
			-e "s|@HOSTCC[@]|$HOSTCC|g" \
			-e "s|@HOSTCXX[@]|$HOSTCXX|g" \
			-e "s|@PATH[@]|$PATH|g"
	done
}

build_stage1() {
	pkginstall filesystem
	pkgtcinstall file
	pkgtcinstall pkgconf
	pkgchinstalltwo linux-headers
	pkgtcinstall binutils
	pkgtcinstall gcc-static
	pkgchinstalltwo musl
	pkgtcinstall gcc
}

build_stage2() {
	pkgchinstall libz
}

update_lunch() {
	mkdir -p $ROOTFS/usr/bin

	cp $CWD/lunch $ROOTFS/usr/bin
}

CMD="${1}"
PKG="${*:2}"

case $CMD in
	stage1)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_stage1
		;;
	stage2)
		check_for_root
		setup_architecture
		setup_environment
		build_environment
		build_toolchain
		build_stage2
		update_lunch
		;;
	stage3)
		;;
	stage4)
		;;
	enter-chroot)
		;;
	tarball)
		;;
	image)
		;;
	package)
		;;
	upackage)
		;;
	viewsums)
		;;
	order)
		;;
	version)
		;;
	usage|*)
		usage
esac

exit 0

